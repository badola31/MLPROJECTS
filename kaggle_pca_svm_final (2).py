# -*- coding: utf-8 -*-
"""Copy of Kaggle_PCA_SVM_FINAL

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dFVaS4rXR3oXs8cXY4WM9tlfOhZu7CVy
"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive',force_remount=True)

df1 = pd.read_csv("/content/drive/MyDrive/traindata - traindata.csv",converters={'features':eval})
df2 = pd.read_csv("/content/drive/MyDrive/trainlabel - trainlabel.csv",usecols=[1])
df3 = pd.read_csv("/content/drive/MyDrive/testdata - testdata.csv",converters={'features':eval})

x = pd.DataFrame(df1['features'].to_list())
test_data= pd.DataFrame(df3['features'].to_list())
y =(df2['labels'].to_list())

dataset = pd.concat([x, test_data], keys=["train_data", "test_data"])

dataset

dataset.loc["train_data"]

dataset.loc["test_data"]

from sklearn.decomposition import PCA

pca=PCA(n_components=50)

x_pca=pca.fit_transform(dataset)
x_pca=pd.DataFrame(x_pca)

train=x_pca.iloc[0:2000,:].values
test=x_pca.iloc[2000:3600,:].values

train

test

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(train,y,train_size=.8)

from sklearn import svm
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression

model = svm.SVC(C=10)
model.fit(x_train,y_train)
model.score(x_test,y_test)

from sklearn.model_selection import cross_val_score
cross_val_score(svm.SVC(),train,y)

cross_val_score(DecisionTreeClassifier(),train,y)

cross_val_score(KNeighborsClassifier(),train,y)

cross_val_score(LogisticRegression(),train,y)



from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

pred_train_y = model.predict(x_train)
print('Model Accuracy | ',accuracy_score(pred_train_y,y_train))

# Make Predictions
pred_y= model.predict(x_test)
# Test Accuracy
print('Test Accuracy | ',accuracy_score(y_test,pred_y))

pred_Y = model.predict(test)

# Confusion Matrix
conf_mat = confusion_matrix(y_test,pred_y)
print('Confusion Matrix')
print(conf_mat)

print(classification_report(y_test,pred_y))

y_pred=model.predict(test)
y_pred

pred_rf = pd.DataFrame({'Predictions': y_pred})
pred_csv = pd.DataFrame({ 'class':pred_rf['Predictions']})
pred_csv.to_csv('predictions11.csv', index=True)