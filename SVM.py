# -*- coding: utf-8 -*-
"""B20MT012_TASK2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sxaZ5Bj5Z6uWR7YIaSZvQ8j_gEZ3T7ks
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive',force_remount=True)

dataset=pd.read_csv("/content/drive/MyDrive/datasets/Dataset_2.csv")

dataset.head()

dataset.isnull()

dataset.shape

x=dataset.iloc[:,1:4].values
y=dataset.iloc[:,-1].values
y

fig=plt.figure(figsize=(15,10))
ax=plt.axes(projection="3d")
ax.scatter3D(dataset.iloc[:,1].values,dataset.iloc[:,2].values,dataset.iloc[:,3])##I took 2,3,4 as they provided different information 1 and 2 were closely related so took one of them.
plt.title("3d plot between features")
ax.set_xlabel('Experience', fontweight ='bold')
ax.set_ylabel('Income', fontweight ='bold')
ax.set_zlabel('CCaverage', fontweight ='bold')
plt.show()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)
x_train

from sklearn.svm import LinearSVC
classifier1=LinearSVC(C=0.0001)
classifier1.fit(x_train,y_train)
score=classifier1.score(x_test,y_test)
print(score)
y_pred=classifier1.predict(x_test)

from sklearn.metrics import confusion_matrix,classification_report
cm=confusion_matrix(y_test,y_pred)
print(cm)

cr=classification_report(y_test,y_pred)
print("classification report",cr)

classifier=LinearSVC(C=0.001)
classifier.fit(x_train,y_train)
score=classifier.score(x_test,y_test)
y_pred=classifier.predict(x_test)
print(score)

from sklearn.metrics import confusion_matrix,classification_report
cm=confusion_matrix(y_test,y_pred)
print(cm)

cr=classification_report(y_test,y_pred)
print("classification report",cr)

classifier=LinearSVC(C=0.01)
classifier.fit(x_train,y_train)
score=classifier.score(x_test,y_test)
print(score)
y_pred=classifier.predict(x_test)

cr=classification_report(y_test,y_pred)
print("classification report",cr)

cm=confusion_matrix(y_test,y_pred)
print(cm)

classifier=LinearSVC(C=0.1)
classifier.fit(x_train,y_train)
score=classifier.score(x_test,y_test)
y_pred=classifier.predict(x_test)
print(score)

cr=classification_report(y_test,y_pred)
print("classification report",cr)

cm=confusion_matrix(y_test,y_pred)
print(cm)

classifier=LinearSVC(C=1)
classifier.fit(x_train,y_train)
score=classifier.score(x_test,y_test)
print(score)
y_pred=classifier.predict(x_test)

cr=classification_report(y_test,y_pred)
print("classification report",cr)

cm=confusion_matrix(y_test,y_pred)
print(cm)

classifier=LinearSVC(C=10)
classifier.fit(x_train,y_train)
score=classifier.score(x_test,y_test)
print(score)
y_pred=classifier.predict(x_test)

cr=classification_report(y_test,y_pred)
print("classification report",cr)

cm=confusion_matrix(y_test,y_pred)
print(cm)

classifier=LinearSVC(C=100)
classifier.fit(x_train,y_train)
score=classifier.score(x_test,y_test)
print(score)
y_pred=classifier.predict(x_test)

cr=classification_report(y_test,y_pred)
print("classification report",cr)

cm=confusion_matrix(y_test,y_pred)
print(cm)

classifier=LinearSVC(C=1000)
classifier.fit(x_train,y_train)
score=classifier.score(x_test,y_test)
print(score)
y_pred=classifier.predict(x_test)

cr=classification_report(y_test,y_pred)
print("classification report",cr)

cm=confusion_matrix(y_test,y_pred)
print(cm)

from sklearn.model_selection import GridSearchCV
parameters={'C':[0.0001,0.001,0.01,0.1,1,10,100,1000]}
grid = GridSearchCV(LinearSVC(), parameters, cv=5)
grid.fit(x_train, y_train)

print(grid.best_params_)

