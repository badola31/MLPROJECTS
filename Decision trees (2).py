# -*- coding: utf-8 -*-
"""B20MT012lab5task1_(1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1utsysbBCHdA3BheaC_h2TGHJ62KVf4bO
"""

import pandas as pd
import numpy as np
import seaborn as sns
from sklearn import tree
import sklearn

dataset=pd.read_csv('drugs.csv')

dataset

features=['Age','Sex','BP','Cholesterol','Na to K']
Target=['Drug']

dataset.isnull().any()





#no datapoint is empty or 0 hence their is no such scenario of dealing with it

from sklearn import preprocessing
label_encoder=preprocessing.LabelEncoder()
dataset['Sex']=label_encoder.fit_transform(dataset['Sex'])
dataset['BP']=label_encoder.fit_transform(dataset['BP'])
dataset['Cholesterol']=label_encoder.fit_transform(dataset['Cholesterol'])
dataset['Drug']=label_encoder.fit_transform(dataset['Drug'])
dataset

#sex,==nominal
#BP,Cholestrol=ordinal

x=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values
x1=x
y1=y
x2=x
y2=y



from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.20,random_state=55)
x1_train,x1_test,y1_train,y1_test=train_test_split(x1,y1,test_size=.10,random_state=55)
x2_train,x2_test,y2_train,y2_test=train_test_split(x2,y2,test_size=.30,random_state=55)

print(y_test)

#from sklearn.preprocessing import StandardScaler
#sc=StandardScaler()
#x_train=sc.fit_transform(x_train)
#x_test=sc.transform(x_test)

#making our 3  models
from sklearn.tree import DecisionTreeClassifier
model=DecisionTreeClassifier(criterion='entropy',random_state=55)
model.fit(x_train,y_train)
model1=DecisionTreeClassifier(criterion='gini',random_state=55)
model1.fit(x1_train,y1_train)
model2=DecisionTreeClassifier(criterion='gini',random_state=55)
model2.fit(x2_train,y2_train)

"""**Model 1(entropy-80:20)**
```


"""

from sklearn.metrics import confusion_matrix,accuracy_score,precision_score,f1_score,recall_score,classification_report
#model accuracy
pred_train_y=model.predict(x_train)
print('model accuracy=',accuracy_score(pred_train_y,y_train))
y_pred=model.predict(x_test)
print('test accuracy=',accuracy_score(y_test,y_pred))

cm=confusion_matrix(y_test,y_pred)
cm

print('report:',classification_report(y_test,y_pred))

import graphviz
dot_tree = tree.export_graphviz(model,filled=True,rounded=True)
graph = graphviz.Source(dot_tree, format="png") 
graph

"""**Model 2(gini-90:10)**

"""

pred_train1_y=model1.predict(x1_train)
print('model accuracy',accuracy_score(pred_train1_y,y1_train))
y1_predict=model1.predict(x1_test)
print('test accuracy=',accuracy_score(y1_test,y1_predict))

cm1=confusion_matrix(y1_test,y1_predict)
cm1

#report
print('report:',classification_report(y1_test,y1_predict))

import graphviz
dot_tree = tree.export_graphviz(model1,filled=True,rounded=True)
graph = graphviz.Source(dot_tree, format="png") 
graph

"""**Model3(gini-70:30)**"""

pred_train2_y=model2.predict(x2_train)
print('model accuracy',accuracy_score(pred_train2_y,y2_train))
y2_predict=model2.predict(x2_test)
print('test accuracy=',accuracy_score(y2_test,y2_predict))

cm2=confusion_matrix(y2_test,y2_predict)
cm2

#report
print('report:',classification_report(y2_test,y2_predict))

import graphviz
dot_tree = tree.export_graphviz(model2,filled=True,rounded=True)
graph = graphviz.Source(dot_tree, format="png") 
graph





